@page "/aichat"
@using Azure.Storage.Blobs
@using System.Text.RegularExpressions;
@inject HttpClient httpClient


<PageTitle>AI Chat</PageTitle>

<h3>AiChat</h3>

<h4>Common</h4>
<InputText @bind-Value=@Question1></InputText>
<button class="btn btn-primary" @onclick="AskQuestion1">Chat</button>
<p>Answer:</p>
<p>@Answer1</p>

<br />

<h4>Chat Playground use own data</h4>
<InputText @bind-Value=@Question2></InputText>
<button class="btn btn-primary" @onclick="AskQuestion2">Chat</button>
<p>Answer:</p>
<p>@Answer2</p>

<br />

<h4>Use own data</h4>
<InputFile OnChange="UploadFile"></InputFile>
<InputText @bind-Value=@Question3></InputText>
<button class="btn btn-primary" @onclick="AskQuestion3">Chat</button>
<p>Answer:</p>
<p>@Answer3</p>

<button class="btn btn-primary" @onclick="ParseAnswer">Parse Answer</button>

<button class="btn btn-primary" @onclick="TriggerSearch">Trigger AI Serach</button>

@code {
    private string Question1 { get; set; } = null;
    private string Answer1 { get; set; } = null;

    private string Question2 { get; set; } = null;
    private string Answer2 { get; set; } = null;

    private string Question3 { get; set; } = null;
    private string Answer3 { get; set; } = null;

    private async Task AskQuestion1()
    {
        try
        {
            Answer1 = await httpClient.GetStringAsync($"https://localhost:7194/aiservice?question={Question1}");


        }
        catch (Exception ex)
        {

        }
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                var connectionString = "DefaultEndpointsProtocol=https;AccountName=blobvj;AccountKey=XZL1m/pPifsD3qNkPh4LhPqBl7ECHgGSyphBNBCIywdoRrBKF3DJfGNz55MDicxKoStePYSlgTOa+AStjMRoMg==;EndpointSuffix=core.windows.net";
                var containerName = "fileupload-trial";
                var blobName = file.Name;

                var blobServiceClient = new BlobServiceClient(connectionString);
                var blobContainerClient = blobServiceClient.GetBlobContainerClient(containerName);
                var blobClient = blobContainerClient.GetBlobClient(blobName);

                await blobClient.UploadAsync(file.OpenReadStream(), true);


                await httpClient.GetAsync($"https://localhost:7194/api/aisearch/{blobName}");

                // var formData = new MultipartFormDataContent();
                // formData.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);
                // await httpClient.PostAsync($"https://localhost:7194/files", formData);
            }
            catch (Exception ex)
            {

            }

        }

    }

    private async Task AskQuestion2()
    {
        try
        {
            Answer2 = await httpClient.GetStringAsync($"https://localhost:7194/aiservice/chatplayground?question={Question2}");
        }
        catch (Exception ex)
        {

        }
    }

    private async Task AskQuestion3()
    {
        try
        {
            Answer3 = await httpClient.GetStringAsync($"https://localhost:7194/aiservice/owndata?question={Question3}");
        }
        catch (Exception ex)
        {

        }
    }

    private async Task TriggerSearch()
    {
        try
        {
            var blobName = "TextDile.pdf";
            await httpClient.GetAsync($"https://localhost:7194/api/aisearch/{blobName}");
        }
        catch (Exception ex)
        {

        }
    }

    public async Task ParseAnswer()
    {
        try
        {
            var answer = "Hybrid working is a purposeful and deliberate choice about how and where we work, depending on what needs to be done. It involves splitting the working week between client/audit entity sites, the office, and home [doc1]. At KPMG, client delivery is at the heart of what they do, so client-facing teams are expected to be on client site or working together in the offices to meet the needs of clients and audited entities [doc1]. The company has previously advised that this should be a minimum of two days a week, but to deliver their best work, they should be striving to spend as much time as possible with clients [doc1].";

            var rg = new Regex("\\[doc[0-9]+\\]", RegexOptions.IgnoreCase);

            var temp = "[doc";
            var lengthDocN = temp.Length;
            var citationReindex = 0;

            var citationLinks = rg.Matches(answer);

            foreach (Match citation in citationLinks)
            {
                var temp1 = citation.Value;
                var citationIndex = citation.Value.Substring(lengthDocN, citation.Value.Length +1);
                var check = "check";

            }
        }
        catch (Exception ex)
        {
            
        }

    }

}
